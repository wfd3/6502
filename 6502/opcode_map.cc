//
// Opcode to implementation map.
//
// Copyright (C) 2023 Walt Drummond
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.

#include <6502.h>

// The instructions.  Flags field provides information about any special
// handling the instruction requires.  For the 6502, the flags are:
//  - InstructionFlags::Branch: Add a cycle if conditional branch is taken (all conditional branches).
//  - InstructionFlags::PageBoundary : Add two cycles if an instruction causes a read from
//                  an address on an adjacent page, specifically indexed addressing modes.
//
// See http://www.6502.org/users/obelisk/6502/addressing.html for more
// information.

const MOS6502::_instructionMap_t MOS6502::setupInstructionMap() { 
	return  {
		// The table below is formatted as follows:
		// { Opcode, 
		//   {"name", AddressingMode, ByteLength, CyclesUsed, Flags, Function pointer for instruction}}
		{ Opcodes.BRK_IMP,
		  { "brk", AddressingMode::Implied, 1, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_brk, this, std::placeholders::_1)}},
		{ Opcodes.ORA_IDX,
		  { "ora", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ORA_ZP,
		  { "ora", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ASL_ZP,
		  { "asl", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_asl, this, std::placeholders::_1)}},
		{ Opcodes.PHP_IMP,
		  { "php", AddressingMode::Implied, 1, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_php, this, std::placeholders::_1)}},
		{ Opcodes.ORA_IMM,
		  { "ora", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ASL_ACC,
		  { "asl", AddressingMode::Accumulator, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_asl, this, std::placeholders::_1)}},
		{ Opcodes.ORA_ABS,
		  { "ora", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ASL_ABS,
		  { "asl", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_asl, this, std::placeholders::_1)}},
		{ Opcodes.BPL_REL,
		  { "bpl", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bpl, this, std::placeholders::_1)}},
		{ Opcodes.ORA_IDY,
		  { "ora", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ORA_ZPX,
		  { "ora", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ASL_ZPX,
		  { "asl", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_asl, this, std::placeholders::_1)}},
		{ Opcodes.CLC_IMP,
		  { "clc", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_clc, this, std::placeholders::_1)}},
		{ Opcodes.ORA_ABY,
		  { "ora", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ORA_ABX,
		  { "ora", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_ora, this, std::placeholders::_1)}},
		{ Opcodes.ASL_ABX,
		  { "asl", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_asl, this, std::placeholders::_1)}},
		{ Opcodes.JSR_ABS,
		  { "jsr", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_jsr, this, std::placeholders::_1)}},
		{ Opcodes.AND_IDX,
		  { "and", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.BIT_ZP,
		  { "bit", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_bit, this, std::placeholders::_1)}},
		{ Opcodes.AND_ZP,
		  { "and", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.ROL_ZP,
		  { "rol", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rol, this, std::placeholders::_1)}},
		{ Opcodes.PLP_IMP,
		  { "plp", AddressingMode::Implied, 1, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_plp, this, std::placeholders::_1)}},
		{ Opcodes.AND_IMM,
		  { "and", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.ROL_ACC,
		  { "rol", AddressingMode::Accumulator, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rol, this, std::placeholders::_1)}},
		{ Opcodes.BIT_ABS,
		  { "bit", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_bit, this, std::placeholders::_1)}},
		{ Opcodes.AND_ABS,
		  { "and", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.ROL_ABS,
		  { "rol", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rol, this, std::placeholders::_1)}},
		{ Opcodes.BMI_REL,
		  { "bmi", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bmi, this, std::placeholders::_1)}},
		{ Opcodes.AND_IDY,
		  { "and", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.AND_ZPX,
		  { "and", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.ROL_ZPX,
		  { "rol", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rol, this, std::placeholders::_1)}},
		{ Opcodes.SEC_IMP,
		  { "sec", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sec, this, std::placeholders::_1)}},
		{ Opcodes.AND_ABY,
		  { "and", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.AND_ABX,
		  { "and", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_and, this, std::placeholders::_1)}},
		{ Opcodes.ROL_ABX,
		  { "rol", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rol, this, std::placeholders::_1)}},
		{ Opcodes.RTI_IMP,
		  { "rti", AddressingMode::Implied, 1, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rti, this, std::placeholders::_1)}},
		{ Opcodes.EOR_IDX,
		  { "eor", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.EOR_ZP,
		  { "eor", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.LSR_ZP,
		  { "lsr", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lsr, this, std::placeholders::_1)}},
		{ Opcodes.PHA_IMP,
		  { "pha", AddressingMode::Implied, 1, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_pha, this, std::placeholders::_1)}},
		{ Opcodes.EOR_IMM,
		  { "eor", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.LSR_ACC,
		  { "lsr", AddressingMode::Accumulator, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lsr, this, std::placeholders::_1)}},
		{ Opcodes.JMP_ABS,
		  { "jmp", AddressingMode::Absolute, 3, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_jmp, this, std::placeholders::_1)}},
		{ Opcodes.EOR_ABS,
		  { "eor", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.LSR_ABS,
		  { "lsr", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lsr, this, std::placeholders::_1)}},
		{ Opcodes.BVC_REL,
		  { "bvc", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bvc, this, std::placeholders::_1)}},
		{ Opcodes.EOR_IDY,
		  { "eor", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.EOR_ZPX,
		  { "eor", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.LSR_ZPX,
		  { "lsr", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lsr, this, std::placeholders::_1)}},
		{ Opcodes.CLI_IMP,
		  { "cli", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cli, this, std::placeholders::_1)}},
		{ Opcodes.EOR_ABY,
		  { "eor", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.EOR_ABX,
		  { "eor", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_eor, this, std::placeholders::_1)}},
		{ Opcodes.LSR_ABX,
		  { "lsr", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lsr, this, std::placeholders::_1)}},
		{ Opcodes.RTS_IMP,
		  { "rts", AddressingMode::Implied, 1, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_rts, this, std::placeholders::_1)}},
		{ Opcodes.ADC_IDX,
		  { "adc", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ADC_ZP,
		  { "adc", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ROR_ZP,
		  { "ror", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ror, this, std::placeholders::_1)}},
		{ Opcodes.PLA_IMP,
		  { "pla", AddressingMode::Implied, 1, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_pla, this, std::placeholders::_1)}},
		{ Opcodes.ADC_IMM,
		  { "adc", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ROR_ACC,
		  { "ror", AddressingMode::Accumulator, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ror, this, std::placeholders::_1)}},
		{ Opcodes.JMP_IND,
		  { "jmp", AddressingMode::Indirect, 3, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_jmp, this, std::placeholders::_1)}},
		{ Opcodes.ADC_ABS,
		  { "adc", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ROR_ABS,
		  { "ror", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ror, this, std::placeholders::_1)}},
		{ Opcodes.BVS_REL,
		  { "bvs", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bvs, this, std::placeholders::_1)}},
		{ Opcodes.ADC_IDY,
		  { "adc", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ADC_ZPX,
		  { "adc", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ROR_ZPX,
		  { "ror", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ror, this, std::placeholders::_1)}},
		{ Opcodes.SEI_IMP,
		  { "sei", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sei, this, std::placeholders::_1)}},
		{ Opcodes.ADC_ABY,
		  { "adc", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ADC_ABX,
		  { "adc", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_adc, this, std::placeholders::_1)}},
		{ Opcodes.ROR_ABX,
		  { "ror", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ror, this, std::placeholders::_1)}},
		{ Opcodes.STA_IDX,
		  { "sta", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.STY_ZP,
		  { "sty", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sty, this, std::placeholders::_1)}},
		{ Opcodes.STA_ZP,
		  { "sta", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.STX_ZP,
		  { "stx", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_stx, this, std::placeholders::_1)}},
		{ Opcodes.DEY_IMP,
		  { "dey", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dey, this, std::placeholders::_1)}},
		{ Opcodes.TXA_IMP,
		  { "txa", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_txa, this, std::placeholders::_1)}},
		{ Opcodes.STY_ABS,
		  { "sty", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sty, this, std::placeholders::_1)}},
		{ Opcodes.STA_ABS,
		  { "sta", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.STX_ABS,
		  { "stx", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_stx, this, std::placeholders::_1)}},
		{ Opcodes.BCC_REL,
		  { "bcc", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bcc, this, std::placeholders::_1)}},
		{ Opcodes.STA_IDY,
		  { "sta", AddressingMode::IndirectY, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.STY_ZPX,
		  { "sty", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sty, this, std::placeholders::_1)}},
		{ Opcodes.STA_ZPX,
		  { "sta", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.STX_ZPY,
		  { "stx", AddressingMode::ZeroPageY, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_stx, this, std::placeholders::_1)}},
		{ Opcodes.TYA_IMP,
		  { "tya", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_tya, this, std::placeholders::_1)}},
		{ Opcodes.STA_ABY,
		  { "sta", AddressingMode::AbsoluteY, 3, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.TXS_IMP,
		  { "txs", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_txs, this, std::placeholders::_1)}},
		{ Opcodes.STA_ABX,
		  { "sta", AddressingMode::AbsoluteX, 3, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sta, this, std::placeholders::_1)}},
		{ Opcodes.LDY_IMM,
		  { "ldy", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldy, this, std::placeholders::_1)}},
		{ Opcodes.LDA_IDX,
		  { "lda", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDX_IMM,
		  { "ldx", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldx, this, std::placeholders::_1)}},
		{ Opcodes.LDY_ZP,
		  { "ldy", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldy, this, std::placeholders::_1)}},
		{ Opcodes.LDA_ZP,
		  { "lda", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDX_ZP,
		  { "ldx", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldx, this, std::placeholders::_1)}},
		{ Opcodes.TAY_IMP,
		  { "tay", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_tay, this, std::placeholders::_1)}},
		{ Opcodes.LDA_IMM,
		  { "lda", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.TAX_IMP,
		  { "tax", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_tax, this, std::placeholders::_1)}},
		{ Opcodes.LDY_ABS,
		  { "ldy", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldy, this, std::placeholders::_1)}},
		{ Opcodes.LDA_ABS,
		  { "lda", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDX_ABS,
		  { "ldx", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldx, this, std::placeholders::_1)}},
		{ Opcodes.BCS_REL,
		  { "bcs", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bcs, this, std::placeholders::_1)}},
		{ Opcodes.LDA_IDY,
		  { "lda", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDY_ZPX,
		  { "ldy", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldy, this, std::placeholders::_1)}},
		{ Opcodes.LDA_ZPX,
		  { "lda", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDX_ZPY,
		  { "ldx", AddressingMode::ZeroPageY, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_ldx, this, std::placeholders::_1)}},
		{ Opcodes.CLV_IMP,
		  { "clv", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_clv, this, std::placeholders::_1)}},
		{ Opcodes.LDA_ABY,
		  { "lda", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.TSX_IMP,
		  { "tsx", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_tsx, this, std::placeholders::_1)}},
		{ Opcodes.LDY_ABX,
		  { "ldy", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_ldy, this, std::placeholders::_1)}},
		{ Opcodes.LDA_ABX,
		  { "lda", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_lda, this, std::placeholders::_1)}},
		{ Opcodes.LDX_ABY,
		  { "ldx", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_ldx, this, std::placeholders::_1)}},
		{ Opcodes.CPY_IMM,
		  { "cpy", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpy, this, std::placeholders::_1)}},
		{ Opcodes.CMP_IDX,
		  { "cmp", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.CPY_ZP,
		  { "cpy", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpy, this, std::placeholders::_1)}},
		{ Opcodes.CMP_ZP,
		  { "cmp", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.DEC_ZP,
		  { "dec", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dec, this, std::placeholders::_1)}},
		{ Opcodes.INY_IMP,
		  { "iny", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_iny, this, std::placeholders::_1)}},
		{ Opcodes.CMP_IMM,
		  { "cmp", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.DEX_IMP,
		  { "dex", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dex, this, std::placeholders::_1)}},
		{ Opcodes.CPY_ABS,
		  { "cpy", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpy, this, std::placeholders::_1)}},
		{ Opcodes.CMP_ABS,
		  { "cmp", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.DEC_ABS,
		  { "dec", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dec, this, std::placeholders::_1)}},
		{ Opcodes.BNE_REL,
		  { "bne", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_bne, this, std::placeholders::_1)}},
		{ Opcodes.CMP_IDY,
		  { "cmp", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.CMP_ZPX,
		  { "cmp", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.DEC_ZPX,
		  { "dec", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dec, this, std::placeholders::_1)}},
		{ Opcodes.CLD_IMP,
		  { "cld", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cld, this, std::placeholders::_1)}},
		{ Opcodes.CMP_ABY,
		  { "cmp", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.CMP_ABX,
		  { "cmp", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_cmp, this, std::placeholders::_1)}},
		{ Opcodes.DEC_ABX,
		  { "dec", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_dec, this, std::placeholders::_1)}},
		{ Opcodes.CPX_IMM,
		  { "cpx", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpx, this, std::placeholders::_1)}},
		{ Opcodes.SBC_IDX,
		  { "sbc", AddressingMode::IndirectX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.CPX_ZP,
		  { "cpx", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpx, this, std::placeholders::_1)}},
		{ Opcodes.SBC_ZP,
		  { "sbc", AddressingMode::ZeroPage, 2, 3, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.INC_ZP,
		  { "inc", AddressingMode::ZeroPage, 2, 5, InstructionFlags::None,
		    std::bind(&MOS6502::ins_inc, this, std::placeholders::_1)}},
		{ Opcodes.INX_IMP,
		  { "inx", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_inx, this, std::placeholders::_1)}},
		{ Opcodes.SBC_IMM,
		  { "sbc", AddressingMode::Immediate, 2, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.NOP_IMP,
		  { "nop", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_nop, this, std::placeholders::_1)}},
		{ Opcodes.CPX_ABS,
		  { "cpx", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_cpx, this, std::placeholders::_1)}},
		{ Opcodes.SBC_ABS,
		  { "sbc", AddressingMode::Absolute, 3, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.INC_ABS,
		  { "inc", AddressingMode::Absolute, 3, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_inc, this, std::placeholders::_1)}},
		{ Opcodes.BEQ_REL,
		  { "beq", AddressingMode::Relative, 2, 2, InstructionFlags::Branch,
		    std::bind(&MOS6502::ins_beq, this, std::placeholders::_1)}},
		{ Opcodes.SBC_IDY,
		  { "sbc", AddressingMode::IndirectY, 2, 5, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.SBC_ZPX,
		  { "sbc", AddressingMode::ZeroPageX, 2, 4, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.INC_ZPX,
		  { "inc", AddressingMode::ZeroPageX, 2, 6, InstructionFlags::None,
		    std::bind(&MOS6502::ins_inc, this, std::placeholders::_1)}},
		{ Opcodes.SED_IMP,
		  { "sed", AddressingMode::Implied, 1, 2, InstructionFlags::None,
		    std::bind(&MOS6502::ins_sed, this, std::placeholders::_1)}},
		{ Opcodes.SBC_ABY,
		  { "sbc", AddressingMode::AbsoluteY, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.SBC_ABX,
		  { "sbc", AddressingMode::AbsoluteX, 3, 4, InstructionFlags::PageBoundary,
		    std::bind(&MOS6502::ins_sbc, this, std::placeholders::_1)}},
		{ Opcodes.INC_ABX,
		  { "inc", AddressingMode::AbsoluteX, 3, 7, InstructionFlags::None,
		    std::bind(&MOS6502::ins_inc, this, std::placeholders::_1)}},

	};
}
